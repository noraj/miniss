crystal_doc_search_index_callback({"repository_name":"miniss","body":"# miniss\n\n![GitHub Workflow Status (with branch)](https://img.shields.io/github/actions/workflow/status/noraj/miniss/test.yml?branch=master&style=flat-square)\n![GitHub License](https://img.shields.io/github/license/noraj/miniss?style=flat-square)\n![GitHub top language](https://img.shields.io/github/languages/top/noraj/miniss?style=flat-square)\n![GitHub commit activity](https://img.shields.io/github/commit-activity/y/noraj/miniss?style=flat-square)\n\n![miniss logo](docs/logo-miniss.png)\n\n**miniss** (_mini ss_) displays a list of open listening sockets. It is a minimal alternative to `ss` or `netstat`.\n\nThe goal of **miniss** is not to reinvent the wheel but rather to offer a static binary that can be deployed by pentester or CTF players on containers or hardened environnement where the classical `ss` or `netstat` binaries have been removed.\n\n## Installation\n\n![GitHub tag (latest SemVer)](https://img.shields.io/github/v/tag/noraj/miniss?sort=semver&style=flat-square)\n![GitHub tag (latest SemVer pre-release)](https://img.shields.io/github/v/tag/noraj/miniss?include_prereleases&sort=semver&style=flat-square)\n\nTODO: Write installation instructions here\n\n## Usage\n\n```\n./miniss\n```\n\n## Features\n\n- Information displayed:\n  - local address, remote address, state, username, uid\n- Type of sockets:\n  - [x] TCP\n  - [x] UDP\n- IP version:\n  - [x] IPv4\n  - [x] IPv6\n\n## Documentation\n\n[![Library documentation](https://img.shields.io/badge/doc-library-black?logo=readthedocs&logoColor=black&style=flat-square)](https://noraj.github.io/miniss/lib-doc/Miniss.html)\n[![User documentation - Build](https://img.shields.io/badge/doc-build-black?logo=readthedocs&logoColor=black&style=flat-square)](https://noraj.github.io/miniss/build)\n[![User documentation - Changelog](https://img.shields.io/badge/doc-changelog-black?logo=readthedocs&logoColor=black&style=flat-square)](https://noraj.github.io/miniss/CHANGELOG)\n[![Developer documentation - Contributing](https://img.shields.io/badge/doc-contributing-black?logo=readthedocs&logoColor=black&style=flat-square)](https://noraj.github.io/miniss/creating)\n[![Developer documentation - Development](https://img.shields.io/badge/doc-development-black?logo=readthedocs&logoColor=black&style=flat-square)](https://noraj.github.io/miniss/development)\n[![User documentation - TODO](https://img.shields.io/badge/doc-todo-black?logo=readthedocs&logoColor=black&style=flat-square)](https://noraj.github.io/miniss/TODO)\n\n## Author\n\n- [noraj](https://pwn.by/noraj/) - creator and maintainer\n","program":{"html_id":"miniss/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"locations":[],"repository_name":"miniss","program":true,"enum":false,"alias":false,"const":false,"types":[{"html_id":"miniss/Miniss","path":"Miniss.html","kind":"module","full_name":"Miniss","name":"Miniss","abstract":false,"locations":[{"filename":"src/miniss.cr","line_number":5,"url":null},{"filename":"src/miniss/addr.cr","line_number":3,"url":null},{"filename":"src/miniss/constants.cr","line_number":3,"url":null}],"repository_name":"miniss","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"TCP_STATES","name":"TCP_STATES","value":"{\"00\" => \"UNKNOWN\", \"FF\" => \"UNKNOWN\", \"01\" => \"ESTABLISHED\", \"02\" => \"SYN_SENT\", \"03\" => \"SYN_RECV\", \"04\" => \"FIN_WAIT1\", \"05\" => \"FIN_WAIT2\", \"06\" => \"TIME_WAIT\", \"07\" => \"CLOSE\", \"08\" => \"CLOSE_WAIT\", \"09\" => \"LAST_ACK\", \"0A\" => \"LISTEN\", \"0B\" => \"CLOSING\", \"0C\" => \"NEW_SYN_RECV\"}","doc":"TCP states code mapping.\n\nUsed in `Miniss::Socket#parse_line`.\n\nNOTE: Parsed from `/usr/src/linux/include/net/tcp_states.h`. I made the choice not to use the same words as `ss` (https://github.com/sivasankariit/iproute2/blob/1179ab033c31d2c67f406be5bcd5e4c0685855fe/misc/ss.c#L400-L413).","summary":"<p>TCP states code mapping.</p>"},{"id":"UDP_STATES","name":"UDP_STATES","value":"TCP_STATES","doc":"UDP \"states\" (UDP is stateless) code mapping.\n\nUsed in `Miniss::Socket#parse_line`.\n\nNOTE: `sk_state` in `/usr/src/linux/include/net/udp.h` is always ESTABLISHED or CLOSE (`ss` shows UNCONN for unconnected).","summary":"<p>UDP &quot;states&quot; (UDP is stateless) code mapping.</p>"},{"id":"VERSION","name":"VERSION","value":"\"0.0.2\"","doc":"`miniss` version.\n\nNOTE: see all versions available [on the release page](https://github.com/noraj/miniss/releases).","summary":"<p><code>miniss</code> version.</p>"}],"doc":"Displays a list of open listening sockets. It is a minimal alternative to `ss` or `netstat`.","summary":"<p>Displays a list of open listening sockets.</p>","class_methods":[{"html_id":"decode_addr(addr:String,ipv:UInt8):String-class-method","name":"decode_addr","doc":"Returns the decoded IPv4 address + port from hexadecimal format (low nibble) to the dotted decimal format.\nReturns the decoded IPv6 address + port from hexadecimal format (low nibble) to the double-dotted hexadecimal format.\n\nExample:\n\n```\nMiniss.decode_addr(\"3500007F:0035\", 4_u8)                         # => \"127.0.0.53:53\"\nMiniss.decode_addr(\"000080FE00000000FF005450B6AD1DFE:0222\", 6_u8) # => \"[fe80::5054:ff:fe1d:adb6]:546\"\nMiniss.decode_addr(\"00000000000000000000000000000000:14E9\", 6_u8) # => \"[::]:5353\"\n```","summary":"<p>Returns the decoded IPv4 address + port from hexadecimal format (low nibble) to the dotted decimal format.</p>","abstract":false,"args":[{"name":"addr","external_name":"addr","restriction":"String"},{"name":"ipv","external_name":"ipv","restriction":"UInt8"}],"args_string":"(addr : String, ipv : UInt8) : String","args_html":"(addr : String, ipv : UInt8) : String","location":{"filename":"src/miniss/addr.cr","line_number":14,"url":null},"def":{"name":"decode_addr","args":[{"name":"addr","external_name":"addr","restriction":"String"},{"name":"ipv","external_name":"ipv","restriction":"UInt8"}],"return_type":"String","visibility":"Public","body":"ip, port = addr.split(\":\", remove_empty: true)\nif ipv == 4\n  ip = (ip.scan(/.{2}/)).reverse_each.join('.') do |__arg0|\n    __arg0[0].to_i(16)\n  end\nelse\n  if ipv == 6\n    ip = (ip.scan(/.{2}/)).reverse_each.join(\"\", &.[](0))\n    ip = (ip.scan(/.{8}/)).reverse_each.join(\"\", &.[](0))\n    ip = (ip.scan(/.{4}/)).each.join(':') do |__arg3|\n      __arg3[0].sub(/^[0]+/, \"\")\n    end\n    ip = (ip.sub(/:{3,}/, \"::\")).downcase\n    ip = \"[#{ip}]\"\n  end\nend\nport = (port.to_i(16)).to_s\n\"#{ip}:#{port}\"\n"}}],"types":[{"html_id":"miniss/Miniss/Etc","path":"Miniss/Etc.html","kind":"module","full_name":"Miniss::Etc","name":"Etc","abstract":false,"locations":[{"filename":"src/miniss/etc/etc.cr","line_number":6,"url":null}],"repository_name":"miniss","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"miniss/Miniss","kind":"module","full_name":"Miniss","name":"Miniss"},"doc":"Rudimentary implementation of Ruby's [Etc module](https://ruby-doc.org/3.2.1/exts/etc/Etc.htm).\n\n> The Etc module provides access to information typically stored in files in the `/etc` directory on Unix systems.\n\nOnly implements the methods required for miniss.","summary":"<p>Rudimentary implementation of Ruby's <a href=\"https://ruby-doc.org/3.2.1/exts/etc/Etc.htm\">Etc module</a>.</p>","class_methods":[{"html_id":"getpwuid(uid):String-class-method","name":"getpwuid","doc":"Returns the username with the given integer _uid_.\n\nReturns an empty string if the user is not found in `/etc/passwd`.\n\nNOTE: Ruby's [getpwuid()](https://ruby-doc.org/3.2.1/exts/etc/Etc.html#method-c-getpwuid).\n\nExample:\n\n```\nMiniss::Etc.getpwuid(0) # => \"root\"\n```","summary":"<p>Returns the username with the given integer <em>uid</em>.</p>","abstract":false,"args":[{"name":"uid","external_name":"uid","restriction":""}],"args_string":"(uid) : String","args_html":"(uid) : String","location":{"filename":"src/miniss/etc/etc.cr","line_number":18,"url":null},"def":{"name":"getpwuid","args":[{"name":"uid","external_name":"uid","restriction":""}],"return_type":"String","visibility":"Public","body":"(File.read_lines(\"/etc/passwd\")).each do |line|\n  entry = line.split(\":\", remove_empty: false)\n  if entry[2] == uid.to_s\n    return entry[0]\n  end\nend\n\"\"\n"}}]},{"html_id":"miniss/Miniss/Socket","path":"Miniss/Socket.html","kind":"class","full_name":"Miniss::Socket","name":"Socket","abstract":false,"superclass":{"html_id":"miniss/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"miniss/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"miniss/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/miniss/addr.cr","line_number":42,"url":null}],"repository_name":"miniss","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"miniss/Miniss","kind":"module","full_name":"Miniss","name":"Miniss"},"doc":"Socket object, having several properties.\n\nExample:\n\n```\nso = Miniss::Socket.new(:tcp, 4_u8)\nline = File.readlines(\"/proc/net/tcp\")[1]\nso.parse_line(line)\nso.laddr # => \"127.0.0.53:53\"\nso.state # => \"LISTEN\"\nso.uname # => \"systemd-resolve\"\nso.uid   # => 980\n```","summary":"<p>Socket object, having several properties.</p>","constructors":[{"html_id":"new(type:Symbol,ipv:UInt8)-class-method","name":"new","doc":"Initialize `Socket` class.\n\nChoose the type of socket. Arguments: _type_ (cf. `#type`), _ipv_ (cf. `#ipv`).","summary":"<p>Initialize <code><a href=\"../Miniss/Socket.html\">Socket</a></code> class.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"Symbol"},{"name":"ipv","external_name":"ipv","restriction":"UInt8"}],"args_string":"(type : Symbol, ipv : UInt8)","args_html":"(type : Symbol, ipv : UInt8)","location":{"filename":"src/miniss/addr.cr","line_number":71,"url":null},"def":{"name":"new","args":[{"name":"type","external_name":"type","restriction":"Symbol"},{"name":"ipv","external_name":"ipv","restriction":"UInt8"}],"visibility":"Public","body":"_ = allocate\n_.initialize(type, ipv)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"ipv:UInt8-instance-method","name":"ipv","doc":"IP version (v4, v6).\n\nAccepts values: `4_u8`, `6_u8`.","summary":"<p>IP version (v4, v6).</p>","abstract":false,"location":{"filename":"src/miniss/addr.cr","line_number":66,"url":null},"def":{"name":"ipv","return_type":"UInt8","visibility":"Public","body":"@ipv"}},{"html_id":"laddr:String-instance-method","name":"laddr","doc":"Local address (IP + port).","summary":"<p>Local address (IP + port).</p>","abstract":false,"location":{"filename":"src/miniss/addr.cr","line_number":44,"url":null},"def":{"name":"laddr","return_type":"String","visibility":"Public","body":"@laddr"}},{"html_id":"laddr=(laddr:String)-instance-method","name":"laddr=","doc":"Local address (IP + port).","summary":"<p>Local address (IP + port).</p>","abstract":false,"args":[{"name":"laddr","external_name":"laddr","restriction":"String"}],"args_string":"(laddr : String)","args_html":"(laddr : String)","location":{"filename":"src/miniss/addr.cr","line_number":44,"url":null},"def":{"name":"laddr=","args":[{"name":"laddr","external_name":"laddr","restriction":"String"}],"visibility":"Public","body":"@laddr = laddr"}},{"html_id":"parse_line(line:String):Nil-instance-method","name":"parse_line","doc":"Parse a socket _line_ from `/proc/net/XXX` and set `Socket` instance properties.","summary":"<p>Parse a socket <em>line</em> from <code>/proc/net/XXX</code> and set <code><a href=\"../Miniss/Socket.html\">Socket</a></code> instance properties.</p>","abstract":false,"args":[{"name":"line","external_name":"line","restriction":"String"}],"args_string":"(line : String) : Nil","args_html":"(line : String) : Nil","location":{"filename":"src/miniss/addr.cr","line_number":79,"url":null},"def":{"name":"parse_line","args":[{"name":"line","external_name":"line","restriction":"String"}],"return_type":"Nil","visibility":"Public","body":"entry = line.split(\" \", remove_empty: true)\nif @type == (:tcp)\n  @state = Miniss::TCP_STATES[entry[3]]\nelse\n  if @type == (:udp)\n    @state = Miniss::UDP_STATES[entry[3]]\n  end\nend\nif @ipv == 4\n  @laddr = Miniss.decode_addr(entry[1], 4_u8)\n  @raddr = Miniss.decode_addr(entry[2], 4_u8)\nelse\n  if @ipv == 6\n    @laddr = Miniss.decode_addr(entry[1], 6_u8)\n    @raddr = Miniss.decode_addr(entry[2], 6_u8)\n  end\nend\n@uid = entry[7].to_u32\n@uname = Miniss::Etc.getpwuid(@uid)\n"}},{"html_id":"raddr:String-instance-method","name":"raddr","doc":"Remote address (IP + port).","summary":"<p>Remote address (IP + port).</p>","abstract":false,"location":{"filename":"src/miniss/addr.cr","line_number":47,"url":null},"def":{"name":"raddr","return_type":"String","visibility":"Public","body":"@raddr"}},{"html_id":"raddr=(raddr:String)-instance-method","name":"raddr=","doc":"Remote address (IP + port).","summary":"<p>Remote address (IP + port).</p>","abstract":false,"args":[{"name":"raddr","external_name":"raddr","restriction":"String"}],"args_string":"(raddr : String)","args_html":"(raddr : String)","location":{"filename":"src/miniss/addr.cr","line_number":47,"url":null},"def":{"name":"raddr=","args":[{"name":"raddr","external_name":"raddr","restriction":"String"}],"visibility":"Public","body":"@raddr = raddr"}},{"html_id":"state:String-instance-method","name":"state","doc":"Socket state cf. `Miniss::TCP_STATES`.","summary":"<p>Socket state cf.</p>","abstract":false,"location":{"filename":"src/miniss/addr.cr","line_number":50,"url":null},"def":{"name":"state","return_type":"String","visibility":"Public","body":"@state"}},{"html_id":"state=(state:String)-instance-method","name":"state=","doc":"Socket state cf. `Miniss::TCP_STATES`.","summary":"<p>Socket state cf.</p>","abstract":false,"args":[{"name":"state","external_name":"state","restriction":"String"}],"args_string":"(state : String)","args_html":"(state : String)","location":{"filename":"src/miniss/addr.cr","line_number":50,"url":null},"def":{"name":"state=","args":[{"name":"state","external_name":"state","restriction":"String"}],"visibility":"Public","body":"@state = state"}},{"html_id":"type:Symbol-instance-method","name":"type","doc":"Socket type (TCP, UDP).\n\nAccepts values: `:tcp`, `:udp`.","summary":"<p>Socket type (TCP, UDP).</p>","abstract":false,"location":{"filename":"src/miniss/addr.cr","line_number":61,"url":null},"def":{"name":"type","return_type":"Symbol","visibility":"Public","body":"@type"}},{"html_id":"uid:UInt32-instance-method","name":"uid","doc":"Process owner user ID.","summary":"<p>Process owner user ID.</p>","abstract":false,"location":{"filename":"src/miniss/addr.cr","line_number":53,"url":null},"def":{"name":"uid","return_type":"UInt32","visibility":"Public","body":"@uid"}},{"html_id":"uid=(uid:UInt32)-instance-method","name":"uid=","doc":"Process owner user ID.","summary":"<p>Process owner user ID.</p>","abstract":false,"args":[{"name":"uid","external_name":"uid","restriction":"UInt32"}],"args_string":"(uid : UInt32)","args_html":"(uid : UInt32)","location":{"filename":"src/miniss/addr.cr","line_number":53,"url":null},"def":{"name":"uid=","args":[{"name":"uid","external_name":"uid","restriction":"UInt32"}],"visibility":"Public","body":"@uid = uid"}},{"html_id":"uname:String-instance-method","name":"uname","doc":"Process owner user name.","summary":"<p>Process owner user name.</p>","abstract":false,"location":{"filename":"src/miniss/addr.cr","line_number":56,"url":null},"def":{"name":"uname","return_type":"String","visibility":"Public","body":"@uname"}},{"html_id":"uname=(uname:String)-instance-method","name":"uname=","doc":"Process owner user name.","summary":"<p>Process owner user name.</p>","abstract":false,"args":[{"name":"uname","external_name":"uname","restriction":"String"}],"args_string":"(uname : String)","args_html":"(uname : String)","location":{"filename":"src/miniss/addr.cr","line_number":56,"url":null},"def":{"name":"uname=","args":[{"name":"uname","external_name":"uname","restriction":"String"}],"visibility":"Public","body":"@uname = uname"}}]},{"html_id":"miniss/Miniss/Sockets","path":"Miniss/Sockets.html","kind":"class","full_name":"Miniss::Sockets","name":"Sockets","abstract":false,"superclass":{"html_id":"miniss/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"miniss/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"miniss/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/miniss/addr.cr","line_number":109,"url":null}],"repository_name":"miniss","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"miniss/Miniss","kind":"module","full_name":"Miniss","name":"Miniss"},"doc":"Sockets object has properties containing arrays of `Sockets` from the parsed\n`/proc/net/xxx` files.\n\nExample:\n\n```\nsockets = Miniss::Sockets.new\nsockets.tcpv4.each do |so|\n  puts \"#{so.laddr} <-> #{so.raddr}\"\nend\n```","summary":"<p>Sockets object has properties containing arrays of <code><a href=\"../Miniss/Sockets.html\">Sockets</a></code> from the parsed <code>/proc/net/xxx</code> files.</p>","constructors":[{"html_id":"new-class-method","name":"new","doc":"Initialize `Sockets` class.","summary":"<p>Initialize <code><a href=\"../Miniss/Sockets.html\">Sockets</a></code> class.</p>","abstract":false,"location":{"filename":"src/miniss/addr.cr","line_number":123,"url":null},"def":{"name":"new","visibility":"Public","body":"_ = allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"all-instance-method","name":"all","doc":"Returns all sockets","summary":"<p>Returns all sockets</p>","abstract":false,"location":{"filename":"src/miniss/addr.cr","line_number":183,"url":null},"def":{"name":"all","visibility":"Public","body":"((@tcpv4 + @tcpv6) + @udpv4) + @udpv6"}},{"html_id":"parse_tcpv4:Array(Socket)-instance-method","name":"parse_tcpv4","doc":"Parse all IPv4 TCP sockets from `/proc/net/tcp`.","summary":"<p>Parse all IPv4 TCP sockets from <code>/proc/net/tcp</code>.</p>","abstract":false,"location":{"filename":"src/miniss/addr.cr","line_number":131,"url":null},"def":{"name":"parse_tcpv4","return_type":"Array(Socket)","visibility":"Public","body":"sockets = Array(Socket).new\n(File.read_lines(\"/proc/net/tcp\")).each_with_index do |line, i|\n  so = Miniss::Socket.new(:tcp, 4_u8)\n  if i == 0\n  else\n    so.parse_line(line)\n    sockets << so\n  end\nend\n@tcpv4 = sockets\n"}},{"html_id":"parse_tcpv6:Array(Socket)-instance-method","name":"parse_tcpv6","doc":"Parse all IPv6 TCP sockets from `/proc/net/tcp6`.","summary":"<p>Parse all IPv6 TCP sockets from <code>/proc/net/tcp6</code>.</p>","abstract":false,"location":{"filename":"src/miniss/addr.cr","line_number":144,"url":null},"def":{"name":"parse_tcpv6","return_type":"Array(Socket)","visibility":"Public","body":"sockets = Array(Socket).new\n(File.read_lines(\"/proc/net/tcp6\")).each_with_index do |line, i|\n  so = Miniss::Socket.new(:tcp, 6_u8)\n  if i == 0\n  else\n    so.parse_line(line)\n    sockets << so\n  end\nend\n@tcpv6 = sockets\n"}},{"html_id":"parse_udpv4:Array(Socket)-instance-method","name":"parse_udpv4","doc":"Parse all IPv4 UDP sockets from `/proc/net/udp`.","summary":"<p>Parse all IPv4 UDP sockets from <code>/proc/net/udp</code>.</p>","abstract":false,"location":{"filename":"src/miniss/addr.cr","line_number":157,"url":null},"def":{"name":"parse_udpv4","return_type":"Array(Socket)","visibility":"Public","body":"sockets = Array(Socket).new\n(File.read_lines(\"/proc/net/udp\")).each_with_index do |line, i|\n  so = Miniss::Socket.new(:udp, 4_u8)\n  if i == 0\n  else\n    so.parse_line(line)\n    sockets << so\n  end\nend\n@udpv4 = sockets\n"}},{"html_id":"parse_udpv6:Array(Socket)-instance-method","name":"parse_udpv6","doc":"Parse all IPv6 UDP sockets from `/proc/net/udp6`.","summary":"<p>Parse all IPv6 UDP sockets from <code>/proc/net/udp6</code>.</p>","abstract":false,"location":{"filename":"src/miniss/addr.cr","line_number":170,"url":null},"def":{"name":"parse_udpv6","return_type":"Array(Socket)","visibility":"Public","body":"sockets = Array(Socket).new\n(File.read_lines(\"/proc/net/udp6\")).each_with_index do |line, i|\n  so = Miniss::Socket.new(:udp, 6_u8)\n  if i == 0\n  else\n    so.parse_line(line)\n    sockets << so\n  end\nend\n@udpv6 = sockets\n"}},{"html_id":"tcpv4:Array(Socket)-instance-method","name":"tcpv4","doc":"Returns all IPv4 TCP sockets","summary":"<p>Returns all IPv4 TCP sockets</p>","abstract":false,"location":{"filename":"src/miniss/addr.cr","line_number":111,"url":null},"def":{"name":"tcpv4","return_type":"Array(Socket)","visibility":"Public","body":"@tcpv4"}},{"html_id":"tcpv6:Array(Socket)-instance-method","name":"tcpv6","doc":"Returns all IPv6 TCP sockets","summary":"<p>Returns all IPv6 TCP sockets</p>","abstract":false,"location":{"filename":"src/miniss/addr.cr","line_number":114,"url":null},"def":{"name":"tcpv6","return_type":"Array(Socket)","visibility":"Public","body":"@tcpv6"}},{"html_id":"udpv4:Array(Socket)-instance-method","name":"udpv4","doc":"Returns all IPv4 UDP sockets","summary":"<p>Returns all IPv4 UDP sockets</p>","abstract":false,"location":{"filename":"src/miniss/addr.cr","line_number":117,"url":null},"def":{"name":"udpv4","return_type":"Array(Socket)","visibility":"Public","body":"@udpv4"}},{"html_id":"udpv6:Array(Socket)-instance-method","name":"udpv6","doc":"Returns all IPv6 UDP sockets","summary":"<p>Returns all IPv6 UDP sockets</p>","abstract":false,"location":{"filename":"src/miniss/addr.cr","line_number":120,"url":null},"def":{"name":"udpv6","return_type":"Array(Socket)","visibility":"Public","body":"@udpv6"}}]}]}]}})